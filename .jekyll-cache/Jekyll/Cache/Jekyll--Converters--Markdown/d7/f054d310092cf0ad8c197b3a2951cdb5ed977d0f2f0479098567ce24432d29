I"›	<p style="text-align:justify;">
Java, nesne-yÃ¶nelimli programlamanÄ±n (object-oriented programming) Â yazÄ±lÄ±m geliÅŸtirme iÃ§in temel paradigma olduÄŸu 1990â€™lÄ± yÄ±llarda nesne-yÃ¶nelimliÂ  bir programlama dili olarak tasarlanmÄ±ÅŸtÄ±r. Nesne-yÃ¶nelimli programlamadan Ã§ok Ã¶nce Lisp ve Scheme gibi fonksiyonel programlama dilleri olmasÄ±na raÄŸmen akademik Ã§evreler dÄ±ÅŸÄ±nda pek raÄŸbet gÃ¶rmemiÅŸtir. Son zamanlarda da fonksiyonel programlama Ã¶nem kazanmÄ±ÅŸtÄ±r Ã§Ã¼nkÃ¼ eÅŸzamanlÄ± ve olay gÃ¼dÃ¼mlÃ¼ programlama iÃ§in bu yÃ¶ntem Ã§ok uygundur. Ama bu, nesne-yÃ¶nelimli programlamanÄ±n kÃ¶tÃ¼ olduÄŸu anlamÄ±na gelmemektedir. Aksine nesne-yÃ¶nelimli programlamayla fonksiyonel programlamanÄ±n harmanlanmasÄ± bu konuya daha da iÅŸlevsellik kazandÄ±rmaktadÄ±r. Ã–rneÄŸin programlama dilinin iÅŸlevsel ifadeler iÃ§in uygun bir sÃ¶z dizimi (syntax) varsa koleksiyon kÃ¼tÃ¼phaneleri gÃ¼Ã§lÃ¼ APIâ€™ler sunabilir. Java 8 ile gelen temel deÄŸiÅŸiklik fonksiyonel programlama yapÄ±larÄ±nÄ±n nesne-yÃ¶nelimli yapÄ±nÄ±n kÃ¶klerine eklenmesidir [1].</p>
<p style="text-align:justify;">
Lambda ifadeleri de Java 8 ile birlikte gelen en bÃ¼yÃ¼k yenilik olarak gÃ¶rÃ¼lmÃ¼ÅŸtÃ¼r. Ana amacÄ± fonksiyonel programlamayÄ± kolaylaÅŸtÄ±rarak kod geliÅŸtirmeyi veya yazmayÄ± daha sade ve basit hale getirmeyi saÄŸlamaktÄ±r [2]. Bir lambda ifadesi anonim bir fonksiyonun kÄ±sa bir ÅŸekilde gÃ¶sterimi de diyebiliriz. Bir isme sahip deÄŸildir ancak parametre listesine, bir gÃ¶vdeye ve bir dÃ¶nÃ¼ÅŸ tipine ayrÄ±ca da fÄ±rlatÄ±labilecek istisnalarÄ±n (exceptions) bir listesine sahiptir. Bu tanÄ±mÄ± biraz daha anlaÅŸÄ±labilir olmasÄ± adÄ±na aÃ§acak olursak;
</p>
<ul style="text-align:justify;">
 	<li>Anonimdir dedik Ã§Ã¼nkÃ¼ bir metodun normalde sahip olacaÄŸÄ± gibi belirgin bir isme sahip deÄŸildir.</li>
 	<li>Fonksiyondur dedik Ã§Ã¼nkÃ¼ bir lambda belirli bir sÄ±nÄ±fla bir metod gibi iliÅŸkili deÄŸildir. Ancak bir metod gibi parametre listesi, bir gÃ¶vdesi, bir dÃ¶nÃ¼ÅŸ tipi ve muhtemel fÄ±rlatÄ±labilecek istisna listesine sahiptir.</li>
 	<li>Bir lambda ifadesi bir metodda argÃ¼man olarak geÃ§irilebilir veya bir deÄŸiÅŸkende depolanabilir.</li>
 	<li>YazÄ±mÄ± kÄ±sadÄ±r, anonim sÄ±nÄ±flar gibi basmakalÄ±p uzun bir yazÄ±mÄ± yoktur.</li>
</ul>
<p style="text-align:justify;">
SonuÃ§ olarak kodumuzun daha net ve esnek olmasÄ±nÄ± saÄŸlar. Ã–rneÄŸin lambda ifadesi kullanarak daha kÄ±sa bir ÅŸekilde Ã¶zel bir Comparator nesnesi oluÅŸturabilirsiniz [3].
</p>
:ET